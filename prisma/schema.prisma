generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Simulation {
  id                     String                  @id @default(cuid())
  name                   String
  startDate              DateTime
  realRate               Float
  version                Int                     @default(1)
  parentSimulationId     String?                 
  isLegacy               Boolean                 @default(false)
  isSituacaoAtual        Boolean                 @default(false)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  financialAllocations   FinancialAllocation[]
  immobilizedAllocations ImmobilizedAllocation[]
  movements              Movement[]
  insurances             Insurance[]
  
  @@index([name, version])
}

model FinancialAllocation {
  id           String                      @id @default(cuid())
  name         String
  simulationId String
  createdAt    DateTime                    @default(now())
  simulation   Simulation                  @relation(fields: [simulationId], references: [id], onDelete: Cascade)
  history      FinancialAllocationHistory[]
}

model FinancialAllocationHistory {
  id           String              @id @default(cuid())
  allocationId String
  value        Float
  date         DateTime
  createdAt    DateTime            @default(now())
  
  allocation   FinancialAllocation @relation(fields: [allocationId], references: [id], onDelete: Cascade)
  
  @@index([allocationId, date])
}

model ImmobilizedAllocation {
  id           String                        @id @default(cuid())
  name         String
  simulationId String
  hasFinancing Boolean                       @default(false)
  financingStartDate DateTime?
  financingInstallments Int?
  financingInterestRate Float?
  financingDownPayment Float?
  createdAt    DateTime                      @default(now())
  simulation   Simulation                    @relation(fields: [simulationId], references: [id], onDelete: Cascade)
  history      ImmobilizedAllocationHistory[]
}

model ImmobilizedAllocationHistory {
  id           String                 @id @default(cuid())
  allocationId String
  value        Float
  date         DateTime
  createdAt    DateTime               @default(now())
  allocation   ImmobilizedAllocation  @relation(fields: [allocationId], references: [id], onDelete: Cascade)
  
  @@index([allocationId, date])
}

model Movement {
  id           String     @id @default(cuid())
  simulationId String
  type         String
  description  String
  value        Float
  startDate    DateTime
  endDate      DateTime?
  frequency    String 
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  simulation   Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade)
  
  @@index([simulationId, type, startDate])
}

model Insurance {
  id           String     @id @default(cuid())
  simulationId String
  name         String
  type         String
  premium      Float      
  coverage     Float      
  startDate    DateTime
  durationMonths Int      
  endDate      DateTime   
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt 
  simulation   Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade)
  
  @@index([simulationId, startDate])
}